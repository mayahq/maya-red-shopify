"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("../../io/http/http");
var blockSchema_1 = __importDefault(require("../../io/mongo/blockSchema"));
var collectionSchema_1 = __importDefault(require("../../io/mongo/collectionSchema"));
var collection_1 = require("../collection");
var API_URL = "http://localhost:9000/db-operation";
var io = new http_1.HttpIoClient({
    apiUrl: API_URL,
    headers: {}
});
var rootCollection = new collection_1.Collection({
    absPath: '/remoteBlockTest',
    io: io
});
/**
 * Initial hierarchy -
 *
 * remoteBlockTest
 * |--rblock  (test read)
 * |--wblock  (test write)
 * |--ublock  (test update)
 * |--cublock (test concurrent update)
 */
describe('Remote StorageBlock implementation', function () {
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var data, cuData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    data = {
                        counter: 1,
                        user: {
                            name: 'Dushyant',
                            age: 21,
                            education: {
                                college: 'BITS Pilani',
                                year: 4,
                                major: 'Computer Science'
                            }
                        }
                    };
                    cuData = {
                        vals: [1]
                    };
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/remoteBlockTest' })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/remoteBlockTest/rblock', data: JSON.stringify(data) })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/remoteBlockTest/wblock', data: JSON.stringify(data) })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/remoteBlockTest/ublock', data: JSON.stringify(data) })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/remoteBlockTest/cublock', data: JSON.stringify(cuData) })];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var regexp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    regexp = "^/remoteBlockTest";
                    return [4 /*yield*/, collectionSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Lock-and-get operation works for simple read', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = rootCollection.block('rblock');
                    return [4 /*yield*/, block.lockAndGet({
                            user: {
                                name: 'Sneha',
                                id: '2018A7PS0179P',
                                education: {
                                    college: ''
                                }
                            }
                        })];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        user: {
                            name: 'Dushyant',
                            id: '2018A7PS0179P',
                            education: {
                                college: 'BITS Pilani'
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('Lock-and-set operation works for simple write', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, result, blockDoc, blockData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = rootCollection.block('wblock');
                    return [4 /*yield*/, block.lockAndSet({
                            counter: 2,
                            user: {
                                name: 'Sneha',
                                education: {
                                    college: 'NMIMS',
                                    major: 'Design'
                                }
                            }
                        })];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        counter: 2,
                        user: {
                            name: 'Sneha',
                            age: 21,
                            education: {
                                college: 'NMIMS',
                                year: 4,
                                major: 'Design'
                            }
                        }
                    });
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/remoteBlockTest/wblock' })];
                case 2:
                    blockDoc = _a.sent();
                    blockData = JSON.parse(blockDoc.data);
                    expect(blockData.user.name).toBe('Sneha');
                    return [2 /*return*/];
            }
        });
    }); });
    test('Lock-and-update operation works for simple update', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, result, blockDoc, blockData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = rootCollection.block('ublock');
                    return [4 /*yield*/, block.lockAndUpdate({
                            counter: { $set: 2 }
                        })];
                case 1:
                    result = _a.sent();
                    expect(result.counter).toBe(2);
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/remoteBlockTest/ublock' })];
                case 2:
                    blockDoc = _a.sent();
                    blockData = JSON.parse(blockDoc.data);
                    expect(blockData.counter).toBe(2);
                    return [2 /*return*/];
            }
        });
    }); });
    test('Lock-and-update operation works for concurrent update', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, increment, blockDoc, blockData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = rootCollection.block('cublock');
                    increment = function () { return __awaiter(void 0, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, block.lockAndUpdate({
                                    vals: { $push: [1] }
                                })];
                        });
                    }); };
                    return [4 /*yield*/, Promise.all([increment(), increment()])];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/remoteBlockTest/cublock' })];
                case 2:
                    blockDoc = _a.sent();
                    blockData = JSON.parse(blockDoc.data);
                    expect(blockData.vals).toEqual([1, 1, 1]);
                    return [2 /*return*/];
            }
        });
    }); });
});
