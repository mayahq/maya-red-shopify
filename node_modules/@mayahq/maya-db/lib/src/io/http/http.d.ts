import { DatabaseTree, SetQueryOpts, StorageBlock, StorageCollection } from '../../storage/storage';
import { AsyncFunction, blockCreateOpts, ioClient } from '../io';
import { DbRequest } from './types';
export declare class HttpIoClient implements ioClient {
    apiUrl: string;
    headers: any;
    constructor({ apiUrl, headers }: {
        apiUrl: string;
        headers: any;
    });
    _executeOperation(op: DbRequest): Promise<import("axios").AxiosResponse<any, any>>;
    _lockAndGet(blockPath: string, query: any): Promise<any>;
    _lockAndSet(blockPath: string, query: any, opts?: SetQueryOpts): Promise<any>;
    _lockAndUpdate(blockPath: string, query: any): Promise<any>;
    readFromBlock(blockPath: string): Promise<any>;
    writeToBlock(blockPath: string, data: any): Promise<any>;
    createBlock(blockPath: string, opts?: blockCreateOpts): Promise<StorageBlock>;
    deleteBlock(blockPath: string): Promise<void>;
    getBlock(absPath: string): StorageBlock;
    getAllBlocks(absPath: string): Promise<StorageBlock[]>;
    createCollection(absPath: string): Promise<StorageCollection>;
    getCollection(absPath: string): StorageCollection;
    getAllCollections(absPath: string): Promise<StorageCollection[]>;
    deleteCollection(absPath: string): Promise<void>;
    includesCollection(absPath: string): Promise<boolean>;
    includesBlock(absPath: string): Promise<boolean>;
    acquireLockOnBlock(blockPath: string, callback: AsyncFunction): Promise<any>;
    ensureHierarchy(tree: DatabaseTree, absPath: string): Promise<void>;
}
