"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoIoClient = void 0;
var path_1 = __importDefault(require("path"));
var mongoose_1 = __importDefault(require("mongoose"));
var blockSchema_1 = __importDefault(require("./blockSchema"));
var block_1 = require("../../storage/block");
var collection_1 = require("../../storage/collection");
var collectionSchema_1 = __importDefault(require("./collectionSchema"));
var lock_1 = __importDefault(require("./lock"));
var util_1 = require("./util");
var DEFAULT_BLOCK_OPTS = {
    encrypted: true,
    strict: false,
    recursive: true
};
var MongoIoClient = /** @class */ (function () {
    // db: MongooseConnection
    // blockModel: mongoose.Model<any>
    // collectionModel: mongoose.Model<any>
    function MongoIoClient() {
        this.lock = new lock_1.default();
        // mongoose.connect(
        //     'mongodb://localhost:27017/mayatest'
        // )
        // this.db = db
        // this.blockModel = this.db.model('MayaDbBlock', MayaDbBlockSchema)
        // this.collectionModel = this.db.model('MayaDbCollection', MayaDbCollectionSchema)
    }
    MongoIoClient.prototype.readFromBlock = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            var block, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, blockSchema_1.default.findOne({ path: blockPath })];
                    case 1:
                        block = _a.sent();
                        if (!block) {
                            err = new Error("No block exists at path ".concat(blockPath));
                            err.name = 'BLOCK_NOT_FOUND';
                            throw err;
                        }
                        return [2 /*return*/, JSON.parse(block.data)];
                }
            });
        });
    };
    MongoIoClient.prototype.writeToBlock = function (blockPath, data) {
        return __awaiter(this, void 0, void 0, function () {
            var block, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blockPath = (0, util_1.normalizePath)(blockPath);
                        return [4 /*yield*/, blockSchema_1.default.findOneAndUpdate({ path: blockPath }, {
                                $set: { data: JSON.stringify(data) }
                            })];
                    case 1:
                        block = _a.sent();
                        if (!block) {
                            err = new Error("No block exists at path ".concat(blockPath));
                            err.name = 'BLOCK_NOT_FOUND';
                            throw err;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoIoClient.prototype.createBlock = function (blockPath, opts) {
        if (opts === void 0) { opts = DEFAULT_BLOCK_OPTS; }
        return __awaiter(this, void 0, void 0, function () {
            var session, block;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blockPath = (0, util_1.normalizePath)(blockPath);
                        return [4 /*yield*/, mongoose_1.default.startSession()];
                    case 1:
                        session = _a.sent();
                        return [4 /*yield*/, session.withTransaction(function () { return __awaiter(_this, void 0, void 0, function () {
                                var col, err, e_1, err;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, collectionSchema_1.default.findOne({ path: path_1.default.dirname(blockPath) })];
                                        case 1:
                                            col = _a.sent();
                                            if (!!col) return [3 /*break*/, 4];
                                            if (!opts.recursive) return [3 /*break*/, 3];
                                            return [4 /*yield*/, (0, util_1.createCollectionsForAllParentPaths)(blockPath)];
                                        case 2:
                                            _a.sent();
                                            return [3 /*break*/, 4];
                                        case 3:
                                            err = new Error('Parent collection does not exist');
                                            err.name = 'PARENT_COLLECTION_NOT_FOUND';
                                            throw err;
                                        case 4:
                                            _a.trys.push([4, 6, , 7]);
                                            return [4 /*yield*/, blockSchema_1.default.create({ path: blockPath })];
                                        case 5:
                                            _a.sent();
                                            return [3 /*break*/, 7];
                                        case 6:
                                            e_1 = _a.sent();
                                            console.log('Real error creating block:', e_1);
                                            if (e_1.code !== 11000) {
                                                throw e_1;
                                            }
                                            if (opts.strict) {
                                                err = new Error("Block already exists at path: ".concat(blockPath, ".json"));
                                                err.name = 'BLOCK_ALREADY_EXISTS';
                                                throw err;
                                            }
                                            return [3 /*break*/, 7];
                                        case 7: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, session.endSession()];
                    case 3:
                        _a.sent();
                        block = this.getBlock(blockPath);
                        return [2 /*return*/, block];
                }
            });
        });
    };
    MongoIoClient.prototype.deleteBlock = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            var block, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blockPath = (0, util_1.normalizePath)(blockPath);
                        return [4 /*yield*/, blockSchema_1.default.findOneAndDelete({ path: blockPath })];
                    case 1:
                        block = _a.sent();
                        if (!block) {
                            err = new Error("No block exists at path ".concat(blockPath));
                            err.name = 'BLOCK_NOT_FOUND';
                            throw err;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoIoClient.prototype.getBlock = function (absPath) {
        absPath = (0, util_1.normalizePath)(absPath);
        var block = new block_1.Block({ absPath: absPath, io: this });
        return block;
    };
    MongoIoClient.prototype.getAllBlocks = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var blocks;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, blockSchema_1.default.find({ parentPath: absPath })];
                    case 1:
                        blocks = _a.sent();
                        return [2 /*return*/, blocks.map(function (b) { return new block_1.Block({ absPath: b.path, io: _this }); })];
                }
            });
        });
    };
    MongoIoClient.prototype.createCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var block, err, session, collection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, blockSchema_1.default.findOne({ path: absPath })];
                    case 1:
                        block = _a.sent();
                        if (block) {
                            err = new Error('Block with this path already exists');
                            err.code = 'BLOCK_ALREADY_EXISTS';
                            throw err;
                        }
                        return [4 /*yield*/, mongoose_1.default.startSession()];
                    case 2:
                        session = _a.sent();
                        return [4 /*yield*/, session.withTransaction(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, (0, util_1.createCollectionsForAllParentPaths)(absPath)];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, collectionSchema_1.default.create({ path: absPath })];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 3:
                        _a.sent();
                        collection = new collection_1.Collection({ absPath: absPath, io: this });
                        return [2 /*return*/, collection];
                }
            });
        });
    };
    MongoIoClient.prototype.getCollection = function (absPath) {
        absPath = (0, util_1.normalizePath)(absPath);
        return new collection_1.Collection({ absPath: absPath, io: this });
    };
    MongoIoClient.prototype.getAllCollections = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var cols;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, collectionSchema_1.default.find({ parentPath: absPath })];
                    case 1:
                        cols = _a.sent();
                        return [2 /*return*/, cols.map(function (c) { return new collection_1.Collection({ absPath: c.path, io: _this }); })];
                }
            });
        });
    };
    // TODO: Delete all blocks that the collection contains
    MongoIoClient.prototype.deleteCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var session;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, mongoose_1.default.startSession()];
                    case 1:
                        session = _a.sent();
                        return [4 /*yield*/, session.withTransaction(function () { return __awaiter(_this, void 0, void 0, function () {
                                var regexp;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            regexp = "^".concat(absPath);
                                            return [4 /*yield*/, collectionSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, blockSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoIoClient.prototype.includesCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var col;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, collectionSchema_1.default.findOne({ path: absPath })];
                    case 1:
                        col = _a.sent();
                        if (!col) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    MongoIoClient.prototype.includesBlock = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var block;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        return [4 /*yield*/, blockSchema_1.default.findOne({ path: absPath })];
                    case 1:
                        block = _a.sent();
                        if (!block) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    MongoIoClient.prototype.acquireLockOnBlock = function (blockPath, callback) {
        var _this = this;
        blockPath = (0, util_1.normalizePath)(blockPath);
        return new Promise(function (resolve, reject) {
            _this.lock.acquire(blockPath, function (e, releaseLock, lockDocument, lockId) { return __awaiter(_this, void 0, void 0, function () {
                var res, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!e) return [3 /*break*/, 2];
                            console.log("Error acquiring lock on ".concat(blockPath), e);
                            return [4 /*yield*/, releaseLock()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, reject(e)];
                        case 2:
                            _a.trys.push([2, 5, , 7]);
                            return [4 /*yield*/, callback(lockDocument)];
                        case 3:
                            res = _a.sent();
                            return [4 /*yield*/, releaseLock()];
                        case 4:
                            _a.sent();
                            return [2 /*return*/, resolve(res)];
                        case 5:
                            e_2 = _a.sent();
                            console.log("Error acquiring lock on ".concat(blockPath), e_2);
                            return [4 /*yield*/, releaseLock()];
                        case 6:
                            _a.sent();
                            return [2 /*return*/, reject(e_2)];
                        case 7: return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    MongoIoClient.prototype.ensureHierarchy = function (tree, absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var len, entries, i, _a, key, val, dirPath, included, e_3, _i, val_1, subtree, blockPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        absPath = (0, util_1.normalizePath)(absPath);
                        len = Object.keys(tree).length;
                        entries = Object.entries(tree);
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < len)) return [3 /*break*/, 17];
                        _a = entries[i], key = _a[0], val = _a[1];
                        if (!Array.isArray(val)) return [3 /*break*/, 11];
                        dirPath = path_1.default.join(absPath, key);
                        return [4 /*yield*/, this.includesCollection(dirPath)];
                    case 2:
                        included = _b.sent();
                        if (!!included) return [3 /*break*/, 6];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, collectionSchema_1.default.create({ path: dirPath })]; // Create new if its not
                    case 4:
                        _b.sent(); // Create new if its not
                        return [3 /*break*/, 6];
                    case 5:
                        e_3 = _b.sent();
                        console.log('Error creating new collection:', dirPath, e_3);
                        if (e_3.code !== 11000) {
                            throw e_3;
                        }
                        return [3 /*break*/, 6];
                    case 6:
                        _i = 0, val_1 = val;
                        _b.label = 7;
                    case 7:
                        if (!(_i < val_1.length)) return [3 /*break*/, 10];
                        subtree = val_1[_i];
                        return [4 /*yield*/, this.ensureHierarchy(subtree, dirPath)]; // Hehe, go recursive
                    case 8:
                        _b.sent(); // Hehe, go recursive
                        _b.label = 9;
                    case 9:
                        _i++;
                        return [3 /*break*/, 7];
                    case 10: return [3 /*break*/, 16];
                    case 11:
                        if (!(typeof val === 'string')) return [3 /*break*/, 15];
                        blockPath = path_1.default.join(absPath, key) // Calculate block path
                        ;
                        return [4 /*yield*/, this.includesBlock(blockPath)];
                    case 12:
                        if (!!(_b.sent())) return [3 /*break*/, 14];
                        return [4 /*yield*/, blockSchema_1.default.create({ path: blockPath })];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14: return [3 /*break*/, 16];
                    case 15: throw new Error("Invalid database hierarchy specification at path: ".concat(path_1.default.join(absPath, key)));
                    case 16:
                        i++;
                        return [3 /*break*/, 1];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    return MongoIoClient;
}());
exports.MongoIoClient = MongoIoClient;
