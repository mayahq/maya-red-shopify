"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizePath = exports.createCollectionsForAllParentPaths = exports.getAllParentPaths = void 0;
var path_1 = __importDefault(require("path"));
var collectionSchema_1 = __importDefault(require("./collectionSchema"));
function getAllParentPaths(absPath) {
    var dirNames = absPath.split('/').filter(function (r) { return r.length !== 0; });
    var currPath = dirNames[0];
    var result = [currPath];
    for (var i = 1; i < dirNames.length; i++) {
        currPath = path_1.default.join('/', currPath, dirNames[i]);
        result.push(currPath);
    }
    result.pop();
    return result;
}
exports.getAllParentPaths = getAllParentPaths;
function createCollectionsForAllParentPaths(blockPath) {
    var parentPaths = getAllParentPaths(blockPath);
    var promises = parentPaths.map(function (colPath) { return new Promise(function (resolve, reject) {
        collectionSchema_1.default.create({ path: normalizePath(colPath) })
            .then(function (res) { return resolve(res); })
            .catch(function (e) {
            if (e.code === 11000) { // Duplicate key error. Means that the collection already exists
                resolve({});
            }
            else {
                reject(e);
            }
        });
    }); });
    return Promise.all(promises);
}
exports.createCollectionsForAllParentPaths = createCollectionsForAllParentPaths;
function normalizePath(absPath) {
    return path_1.default.join('/', absPath);
}
exports.normalizePath = normalizePath;
