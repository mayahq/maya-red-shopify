"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoLock = void 0;
// import { Collection } from 'mongoose'
var blockSchema_1 = __importDefault(require("./blockSchema"));
var crypto_1 = __importDefault(require("crypto"));
var MongoLock = /** @class */ (function () {
    function MongoLock() {
    }
    MongoLock.prototype.generateId = function () {
        return crypto_1.default.randomBytes(16).toString('hex');
    };
    MongoLock.prototype.acquire = function (path, callback, opts) {
        if (opts === void 0) { opts = {
            acquireFor: 30000,
            pollInterval: 500,
            timeout: 10000
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var lockId, releaseFunction, now_1, lockDocument, ld, error, e_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lockId = this.generateId();
                        releaseFunction = function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, blockSchema_1.default.findOneAndUpdate({
                                            path: path,
                                            lockAcquiredBy: lockId
                                        }, {
                                            $set: {
                                                lockExpiresAt: -1,
                                                lockAcquiredBy: ''
                                            }
                                        }, {
                                            new: true
                                        })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, , 9]);
                        now_1 = Date.now();
                        return [4 /*yield*/, blockSchema_1.default.findOneAndUpdate({
                                path: path,
                                lockExpiresAt: { $lt: now_1 }
                            }, {
                                $set: {
                                    lockExpiresAt: now_1 + opts.acquireFor,
                                    lockAcquiredBy: lockId
                                }
                            })];
                    case 2:
                        lockDocument = _a.sent();
                        if (!!lockDocument) return [3 /*break*/, 7];
                        return [4 /*yield*/, blockSchema_1.default.findOne({ path: path }).select('_id').lean()];
                    case 3:
                        ld = _a.sent();
                        if (!ld) {
                            error = new Error('Block does not exist');
                            error.name = 'BLOCK_NOT_FOUND';
                            throw error;
                        }
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var interval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var result, err;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, blockSchema_1.default.findOneAndUpdate({
                                                    path: path,
                                                    lockExpiresAt: { $lt: Date.now() }
                                                }, {
                                                    $set: {
                                                        lockExpiresAt: Date.now() + opts.acquireFor,
                                                        lockAcquiredBy: lockId
                                                    }
                                                }, {
                                                    new: true
                                                })];
                                            case 1:
                                                result = _a.sent();
                                                if (result) {
                                                    clearInterval(interval);
                                                    return [2 /*return*/, resolve(result)];
                                                }
                                                if (Date.now() - now_1 > opts.timeout) {
                                                    clearInterval(interval);
                                                    err = new Error("Unable to acquire lock: timeout");
                                                    err.name = "TIME_OUT";
                                                    return [2 /*return*/, reject(err)];
                                                }
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }, opts.pollInterval);
                            })];
                    case 5:
                        lockDocument = _a.sent();
                        return [2 /*return*/, callback(null, releaseFunction, lockDocument, lockId)];
                    case 6:
                        e_1 = _a.sent();
                        return [2 /*return*/, callback(e_1, releaseFunction, null, null)];
                    case 7: return [2 /*return*/, callback(null, releaseFunction, lockDocument, lockId)];
                    case 8:
                        e_2 = _a.sent();
                        return [2 /*return*/, callback(e_2, releaseFunction, null, null)];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    MongoLock.prototype.release = function (blockPath, lockId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, blockSchema_1.default.findOneAndUpdate({
                            path: blockPath,
                            lockAcquiredBy: lockId
                        }, {
                            $set: {
                                lockExpiresAt: -1,
                                lockAcquiredBy: ''
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return MongoLock;
}());
exports.MongoLock = MongoLock;
exports.default = MongoLock;
