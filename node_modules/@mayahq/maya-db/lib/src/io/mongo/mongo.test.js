"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var collection_1 = require("../../storage/collection");
var blockSchema_1 = __importDefault(require("./blockSchema"));
var collectionSchema_1 = __importDefault(require("./collectionSchema"));
var mongoIo_1 = require("./mongoIo");
var ioClient = new mongoIo_1.MongoIoClient();
var rootCollection = new collection_1.Collection({
    absPath: '/test',
    io: new mongoIo_1.MongoIoClient()
});
/**
 * Initial hierarchy -
 *
 * test
 * |--col1
 * |--|--block1 (contains data)
 * |--|--block2
 * |--|--blockToDelete
 * |--col2
 * |--|--col3
 * |--|--|--block3
 * |--|--|--block4
 * |--|--col4
 * |--colToDelete
 * |--|--col5
 * |--|--|--ctdBlock3
 * |--|--ctdBlock1
 * |--|--ctdBlock2
 * |--hierarchyCol (To test ensureHierarchy)
 * |--|--hcol1
 * |--|--|--hblock1
 * |--|--hcol2
 */
describe('Mongo I/O Client', function () {
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/col1' })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/col2' })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/col2/col3' })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/col2/col4' })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/colToDelete' })];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/colToDelete/col5' })];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/hierarchyCol' })];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/hierarchyCol/hcol1' })];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.create({ path: '/test/hierarchyCol/hcol2' })];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/col1/block1', data: '{"a": 1}' })];
                case 10:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/col1/block2' })];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/col2/col3/block3' })];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/col2/col3/block4' })];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/col1/blockToDelete' })];
                case 14:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/colToDelete/ctdBlock1' })];
                case 15:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/colToDelete/ctdBlock2' })];
                case 16:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/colToDelete/col5/ctdBlock3' })];
                case 17:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({ path: '/test/hierarchyCol/hcol1/hblock1' })];
                case 18:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var regexp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    regexp = "^/test";
                    return [4 /*yield*/, collectionSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Creating block works if parent collections exist', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, blockDoc, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, rootCollection.createNewBlock('col1/block5')];
                case 1:
                    block = _a.sent();
                    expect(block.absPath).toBe('/test/col1/block5');
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: block.absPath })];
                case 2:
                    blockDoc = _a.sent();
                    expect(blockDoc).toBeTruthy();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    console.log(e_1.message);
                    fail('Block creation failed');
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    test('Creating block works if some parent collections do not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
        var block, newcol1Doc, newcol2Doc, blockDoc, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 5, , 6]);
                    return [4 /*yield*/, rootCollection.createNewBlock('col1/newcol1/newcol2/newblock')];
                case 1:
                    block = _a.sent();
                    expect(block.absPath).toBe('/test/col1/newcol1/newcol2/newblock');
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/col1/newcol1' })];
                case 2:
                    newcol1Doc = _a.sent();
                    expect(newcol1Doc).toBeTruthy();
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/col1/newcol1/newcol2' })];
                case 3:
                    newcol2Doc = _a.sent();
                    expect(newcol2Doc).toBeTruthy();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: block.absPath })];
                case 4:
                    blockDoc = _a.sent();
                    expect(blockDoc).toBeTruthy();
                    return [3 /*break*/, 6];
                case 5:
                    e_2 = _a.sent();
                    console.log(e_2.message);
                    fail('Block creation failed');
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    }); });
    test('Deleting a block works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var blockDoc, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, rootCollection.deleteBlock('col1/blockToDelete')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/col1/blockToDelete' })];
                case 2:
                    blockDoc = _a.sent();
                    expect(blockDoc).toBeFalsy();
                    return [3 /*break*/, 4];
                case 3:
                    e_3 = _a.sent();
                    console.log(e_3.message);
                    fail('Block deletion failed');
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    test('Getting all blocks works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var blocks, blockPaths, e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rootCollection.collection('col1').getAllBlocks()];
                case 1:
                    blocks = _a.sent();
                    blockPaths = blocks.map(function (b) { return b.absPath; });
                    expect(blocks.length).toBeGreaterThanOrEqual(2);
                    expect(blockPaths).toContain('/test/col1/block1');
                    expect(blockPaths).toContain('/test/col1/block2');
                    return [3 /*break*/, 3];
                case 2:
                    e_4 = _a.sent();
                    console.log(e_4.message);
                    fail('Failed to get all blocks');
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    test('Creating a collection works if all parent collections exist', function () { return __awaiter(void 0, void 0, void 0, function () {
        var collection, newCol8;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rootCollection.createNewCollection('col2/newCol5')];
                case 1:
                    collection = _a.sent();
                    expect(collection.absPath).toBe('/test/col2/newCol5');
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: collection.absPath })];
                case 2:
                    newCol8 = _a.sent();
                    expect(newCol8).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Creating collection works if some parent collections do not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
        var collection, newCol8, newCol9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rootCollection.collection('col2/newCol8').createNewCollection('newCol9')];
                case 1:
                    collection = _a.sent();
                    expect(collection.absPath).toBe('/test/col2/newCol8/newCol9');
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/col2/newCol8' })];
                case 2:
                    newCol8 = _a.sent();
                    expect(newCol8).toBeTruthy();
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/col2/newCol8/newCol9' })];
                case 3:
                    newCol9 = _a.sent();
                    expect(newCol9).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Getting all collections works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var cols, colPaths;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rootCollection.collection('col2').getAllCollections()];
                case 1:
                    cols = _a.sent();
                    colPaths = cols.map(function (c) { return c.absPath; });
                    expect(colPaths.length).toBeGreaterThanOrEqual(2);
                    expect(colPaths).toContain('/test/col2/col3');
                    expect(colPaths).toContain('/test/col2/col4');
                    return [2 /*return*/];
            }
        });
    }); });
    test('Deleting a collection works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var colToDelete, col5, ctdBlock1, ctdBlock2, ctdBlock3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rootCollection.deleteCollection('colToDelete')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/colToDelete' })];
                case 2:
                    colToDelete = _a.sent();
                    expect(colToDelete).toBeFalsy();
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/colToDelete/col5' })];
                case 3:
                    col5 = _a.sent();
                    expect(col5).toBeFalsy();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/colToDelete/ctdBlock1' })];
                case 4:
                    ctdBlock1 = _a.sent();
                    expect(ctdBlock1).toBeFalsy();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/colToDelete/ctdBlock2' })];
                case 5:
                    ctdBlock2 = _a.sent();
                    expect(ctdBlock2).toBeFalsy();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/colToDelete/col5/ctdBlock3' })];
                case 6:
                    ctdBlock3 = _a.sent();
                    expect(ctdBlock3).toBeFalsy();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Checking if collection exists works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var i1, i2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ioClient.includesCollection('/test/col1')];
                case 1:
                    i1 = _a.sent();
                    expect(i1).toBe(true);
                    return [4 /*yield*/, ioClient.includesCollection('/test/random')];
                case 2:
                    i2 = _a.sent();
                    expect(i2).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    test('Checking if block exists works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var i1, i2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ioClient.includesBlock('/test/col1/block1')];
                case 1:
                    i1 = _a.sent();
                    expect(i1).toBe(true);
                    return [4 /*yield*/, ioClient.includesBlock('/test/col1/random')];
                case 2:
                    i2 = _a.sent();
                    expect(i2).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    test('Reading from block works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ioClient.readFromBlock('/test/col1/block1')];
                case 1:
                    data = _a.sent();
                    expect(data).toEqual({ a: 1 });
                    return [2 /*return*/];
            }
        });
    }); });
    test('Writing to block works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var data, blockPath, block;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    data = { b: 2 };
                    blockPath = '/test/col1/block2';
                    return [4 /*yield*/, ioClient.writeToBlock(blockPath, data)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: blockPath })];
                case 2:
                    block = _a.sent();
                    expect(JSON.parse(block.data)).toEqual(data);
                    return [2 /*return*/];
            }
        });
    }); });
    test('Acquiring lock on block works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sleep, increment, t1, t2, blockDoc;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sleep = function (time) { return new Promise(function (resolve, reject) { return setTimeout(resolve, time); }); };
                    increment = function () { return __awaiter(void 0, void 0, void 0, function () {
                        var res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, ioClient.acquireLockOnBlock('/test/col1/block1', function () { return __awaiter(void 0, void 0, void 0, function () {
                                        var blockDoc, data;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/col1/block1' })];
                                                case 1:
                                                    blockDoc = _a.sent();
                                                    data = JSON.parse(blockDoc.data);
                                                    return [4 /*yield*/, sleep(2000)];
                                                case 2:
                                                    _a.sent();
                                                    data.a = data.a + 1;
                                                    blockDoc.data = JSON.stringify(data);
                                                    return [4 /*yield*/, blockDoc.save()];
                                                case 3:
                                                    _a.sent();
                                                    return [2 /*return*/, blockDoc];
                                            }
                                        });
                                    }); })];
                                case 1:
                                    res = _a.sent();
                                    return [2 /*return*/, res];
                            }
                        });
                    }); };
                    t1 = Date.now();
                    return [4 /*yield*/, Promise.all([increment(), increment()])];
                case 1:
                    _a.sent();
                    t2 = Date.now();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/col1/block1' })];
                case 2:
                    blockDoc = _a.sent();
                    expect(JSON.parse(blockDoc.data).a).toBe(3);
                    expect(t2 - t1).toBeGreaterThanOrEqual(4000);
                    expect(blockDoc.lockExpiresAt).toBe(-1);
                    return [2 /*return*/];
            }
        });
    }); });
    test('Ensuring hierarchy works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var hblock3, hblock2, hcol3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ioClient.ensureHierarchy({
                        hierarchyCol: [
                            {
                                hcol1: [
                                    {
                                        hblock1: 'BLOCK',
                                        hblock2: 'BLOCK'
                                    }
                                ],
                                hcol2: [
                                    {
                                        hcol3: [
                                            {
                                                hblock3: 'BLOCK'
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }, rootCollection.absPath)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/hierarchyCol/hcol2/hcol3/hblock3' })];
                case 2:
                    hblock3 = _a.sent();
                    expect(hblock3).toBeTruthy();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/test/hierarchyCol/hcol1/hblock2' })];
                case 3:
                    hblock2 = _a.sent();
                    expect(hblock2).toBeTruthy();
                    return [4 /*yield*/, collectionSchema_1.default.findOne({ path: '/test/hierarchyCol/hcol2/hcol3' })];
                case 4:
                    hcol3 = _a.sent();
                    expect(hcol3).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
});
// export interface ioClient {
//     acquireLockOnBlock(blockPath: string, callback: AsyncFunction): Promise<any>,
//     ensureHierarchy(tree: DatabaseTree, absPath: string): Promise<void>
// }
