"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var blockSchema_1 = __importDefault(require("./blockSchema"));
var collectionSchema_1 = __importDefault(require("./collectionSchema"));
var lock_1 = __importDefault(require("./lock"));
var sleep = function (timeout) { return new Promise(function (res) { return setTimeout(res, timeout); }); };
describe('Mongo Lock class', function () {
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, collectionSchema_1.default.create({ path: '/locktest' })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.create({
                            path: '/locktest/tblock',
                            data: JSON.stringify({ a: 1 })
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var regexp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    regexp = "^/locktest";
                    return [4 /*yield*/, collectionSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.deleteMany({ path: { $regex: regexp } })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Lock goes stale if not released', function () { return __awaiter(void 0, void 0, void 0, function () {
        var lock, hold, increment, tblockDoc, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lock = new lock_1.default();
                    hold = function () { return __awaiter(void 0, void 0, void 0, function () {
                        var e_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, lock.acquire('/locktest/tblock', function (e, releaseLock) { return __awaiter(void 0, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (e) {
                                                            fail('Acquiring lock failed');
                                                        }
                                                        // Never calls releaseLock
                                                        return [4 /*yield*/, sleep(1000)];
                                                    case 1:
                                                        // Never calls releaseLock
                                                        _a.sent();
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); }, {
                                            acquireFor: 3000,
                                            pollInterval: 500,
                                            timeout: 30000
                                        })];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    e_2 = _a.sent();
                                    console.log('oops', e_2);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); };
                    increment = function () { return new Promise(function (resolve, reject) {
                        lock.acquire('/locktest/tblock', function (e, releaseLock) { return __awaiter(void 0, void 0, void 0, function () {
                            var block, e_3, e_4;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 8, , 9]);
                                        if (e) {
                                            reject(e);
                                        }
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 5, , 7]);
                                        return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/locktest/tblock' })];
                                    case 2:
                                        block = _a.sent();
                                        block.data = JSON.stringify({ a: 2 });
                                        return [4 /*yield*/, block.save()];
                                    case 3:
                                        _a.sent();
                                        return [4 /*yield*/, releaseLock()];
                                    case 4:
                                        _a.sent();
                                        resolve(block);
                                        return [3 /*break*/, 7];
                                    case 5:
                                        e_3 = _a.sent();
                                        return [4 /*yield*/, releaseLock()];
                                    case 6:
                                        _a.sent();
                                        reject(e_3);
                                        return [3 /*break*/, 7];
                                    case 7: return [3 /*break*/, 9];
                                    case 8:
                                        e_4 = _a.sent();
                                        reject(e_4);
                                        return [3 /*break*/, 9];
                                    case 9: return [2 /*return*/];
                                }
                            });
                        }); }, {
                            acquireFor: 3000,
                            pollInterval: 500,
                            timeout: 30000
                        });
                    }); };
                    return [4 /*yield*/, hold()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, sleep(100)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, increment()];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/locktest/tblock' })];
                case 5:
                    tblockDoc = _a.sent();
                    expect(JSON.parse(tblockDoc.data).a).toBe(2);
                    expect(tblockDoc.lockExpiresAt).toBe(-1);
                    return [3 /*break*/, 7];
                case 6:
                    e_1 = _a.sent();
                    console.log(e_1);
                    fail('Cannot fetch block');
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    }); }, 10000);
    test('Acquiring lock works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var lock, increment, currBlock, currVal, newBlock;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lock = new lock_1.default();
                    increment = function () { return new Promise(function (resolve, reject) {
                        lock.acquire('/locktest/tblock', function (e, releaseLock) { return __awaiter(void 0, void 0, void 0, function () {
                            var block, data, e_5, e_6;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 8, , 9]);
                                        if (e) {
                                            reject(e);
                                        }
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 5, , 7]);
                                        return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/locktest/tblock' })
                                            // Increment
                                        ];
                                    case 2:
                                        block = _a.sent();
                                        data = JSON.parse(block.data);
                                        data.a = data.a + 1;
                                        block.data = JSON.stringify(data);
                                        return [4 /*yield*/, block.save()];
                                    case 3:
                                        _a.sent();
                                        return [4 /*yield*/, releaseLock()];
                                    case 4:
                                        _a.sent();
                                        resolve(block);
                                        return [3 /*break*/, 7];
                                    case 5:
                                        e_5 = _a.sent();
                                        return [4 /*yield*/, releaseLock()];
                                    case 6:
                                        _a.sent();
                                        reject(e_5);
                                        return [3 /*break*/, 7];
                                    case 7: return [3 /*break*/, 9];
                                    case 8:
                                        e_6 = _a.sent();
                                        fail('Unable to perform increment operation in the first place');
                                        return [3 /*break*/, 9];
                                    case 9: return [2 /*return*/];
                                }
                            });
                        }); }, {
                            acquireFor: 10000,
                            pollInterval: 500,
                            timeout: 30000
                        });
                    }); };
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/locktest/tblock' })];
                case 1:
                    currBlock = _a.sent();
                    currVal = JSON.parse(currBlock.data).a;
                    return [4 /*yield*/, Promise.all([increment(), increment()])];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, blockSchema_1.default.findOne({ path: '/locktest/tblock' })];
                case 3:
                    newBlock = _a.sent();
                    expect(JSON.parse(newBlock.data).a).toBe(currVal + 2);
                    expect(newBlock.lockExpiresAt).toBe(-1);
                    return [2 /*return*/];
            }
        });
    }); }, 10000);
});
