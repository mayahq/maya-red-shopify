"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileIOClient = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var lockfile_1 = __importDefault(require("lockfile"));
var block_1 = require("../../storage/block");
var collection_1 = require("../../storage/collection");
var encrypt_1 = require("./encrypt");
function getFileNameWithoutExtension(filename) {
    var parts = filename.split('.');
    parts = parts.slice(0, parts.length - 1);
    return parts.join('.');
}
var FileIOClient = /** @class */ (function () {
    function FileIOClient(_a) {
        var encryptionKey = _a.encryptionKey;
        this.encryptionKey = encryptionKey;
    }
    FileIOClient.prototype.ensureHierarchy = function (tree, absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, _b, key, val, dirPath, _c, val_1, subtree, shouldBeEncrypted, blockPath, block, err;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _i = 0, _a = Object.entries(tree);
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 7];
                        _b = _a[_i], key = _b[0], val = _b[1];
                        if (!Array.isArray(val)) return [3 /*break*/, 3];
                        dirPath = path_1.default.join(absPath, key);
                        return [4 /*yield*/, this.includesCollection(dirPath)];
                    case 2:
                        if (!(_d.sent())) {
                            try {
                                fs_1.default.mkdirSync(dirPath, { recursive: true });
                            }
                            catch (e) {
                                if (!e.message.includes('EEXIST')) {
                                    throw e;
                                }
                            }
                        }
                        for (_c = 0, val_1 = val; _c < val_1.length; _c++) {
                            subtree = val_1[_c];
                            this.ensureHierarchy(subtree, dirPath);
                        }
                        return [3 /*break*/, 6];
                    case 3:
                        if (!(val === 'BLOCK' || val === 'ENCRYPTED_BLOCK')) return [3 /*break*/, 5];
                        shouldBeEncrypted = val.includes('ENCRYPTED');
                        blockPath = path_1.default.join(absPath, key);
                        return [4 /*yield*/, this.includesBlock(blockPath)];
                    case 4:
                        if (_d.sent()) {
                            block = JSON.parse(fs_1.default.readFileSync("".concat(blockPath, ".json")).toString());
                            // console.log('FILE CONTENT:', blockPath, read)
                            // const block = require(`${blockPath}.json`)
                            if (block.__meta.encrypted !== shouldBeEncrypted) {
                                err = new Error("Encryption constraint failed for block at ".concat(path_1.default.join(absPath, key)));
                                err.name = 'FAILED_TO_ENSURE_HIERARCHY';
                                throw err;
                            }
                        }
                        else {
                            this.createBlock(blockPath, { encrypted: shouldBeEncrypted, strict: false, recursive: false });
                        }
                        return [3 /*break*/, 6];
                    case 5: throw new Error("Invalid database hierarchy specification at path: ".concat(path_1.default.join(absPath, key)));
                    case 6:
                        _i++;
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.validateBlockPath = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            var err;
            return __generator(this, function (_a) {
                if (!fs_1.default.existsSync("".concat(blockPath, ".json"))) {
                    err = new Error("No block exists at path ".concat(blockPath));
                    err.name = 'BLOCK_NOT_FOUND';
                    throw err;
                }
                return [2 /*return*/];
            });
        });
    };
    FileIOClient.prototype.validateCollectionPath = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var err;
            return __generator(this, function (_a) {
                if (!fs_1.default.existsSync(absPath) || !fs_1.default.lstatSync(absPath).isDirectory()) {
                    err = new Error("No collection exists at path: ".concat(absPath));
                    err.name = 'COLLECTION_NOT_FOUND';
                    throw err;
                }
                return [2 /*return*/];
            });
        });
    };
    FileIOClient.prototype.includesCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.validateCollectionPath(absPath)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        e_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.includesBlock = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.validateBlockPath(blockPath)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        e_2 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.readFromBlock = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            var blockContent, encrypted, iv, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateBlockPath(blockPath)
                        // const blockContent = require(`${blockPath}.json`)
                    ];
                    case 1:
                        _a.sent();
                        blockContent = JSON.parse(fs_1.default.readFileSync("".concat(blockPath, ".json")).toString());
                        encrypted = blockContent.__meta.encrypted;
                        if (encrypted) {
                            iv = blockContent.__meta.iv;
                            if (!iv) {
                                return [2 /*return*/, {}];
                            }
                            data = (0, encrypt_1.decrypt)(blockContent.__data, this.encryptionKey, iv);
                            return [2 /*return*/, JSON.parse(data)];
                        }
                        else {
                            return [2 /*return*/, blockContent.__data];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.writeToBlock = function (blockPath, data) {
        return __awaiter(this, void 0, void 0, function () {
            var blockContent, encrypted, _a, encryptedData, iv;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.validateBlockPath(blockPath)
                        // const blockContent = require(`${blockPath}.json`)
                    ];
                    case 1:
                        _b.sent();
                        blockContent = JSON.parse(fs_1.default.readFileSync("".concat(blockPath, ".json")).toString());
                        encrypted = blockContent.__meta.encrypted;
                        if (encrypted) {
                            _a = (0, encrypt_1.encrypt)(JSON.stringify(data), this.encryptionKey), encryptedData = _a.encryptedData, iv = _a.iv;
                            blockContent.__data = encryptedData;
                            blockContent.__meta.iv = iv;
                        }
                        else {
                            blockContent.__data = data;
                        }
                        fs_1.default.writeFileSync("".concat(blockPath, ".json"), JSON.stringify(blockContent, null, 2));
                        return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.acquireLockOnBlock = function (blockPath, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateBlockPath(blockPath)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                lockfile_1.default.lock("".concat(blockPath, ".lock"), { wait: 60000, stale: 20000 }, function (err) { return __awaiter(_this, void 0, void 0, function () {
                                    var result, e_3;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (err) {
                                                    return [2 /*return*/, reject(err)];
                                                }
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 3, , 4]);
                                                return [4 /*yield*/, callback()
                                                    // setTimeout(() => lockFile.unlock(path), 10000)
                                                ];
                                            case 2:
                                                result = _a.sent();
                                                // setTimeout(() => lockFile.unlock(path), 10000)
                                                lockfile_1.default.unlock("".concat(blockPath, ".lock"), function () { return null; });
                                                return [2 /*return*/, resolve(result)];
                                            case 3:
                                                e_3 = _a.sent();
                                                lockfile_1.default.unlock("".concat(blockPath, ".lock"), function () { return null; });
                                                return [2 /*return*/, reject(e_3)];
                                            case 4: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileIOClient.prototype.createBlock = function (blockPath, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var err, block_2, dir, fileExists, err, content, block;
            return __generator(this, function (_a) {
                if (fs_1.default.existsSync("".concat(blockPath, ".json"))) {
                    if (opts.strict) {
                        err = new Error("Block already exists at path: ".concat(blockPath, ".json"));
                        err.name = 'BLOCK_ALREADY_EXISTS';
                        throw err;
                    }
                    block_2 = this.getBlock(blockPath);
                    return [2 /*return*/, block_2];
                }
                dir = path_1.default.dirname(blockPath);
                if (!fs_1.default.existsSync(dir)) {
                    fs_1.default.mkdirSync(dir, { recursive: true });
                }
                else {
                    fileExists = !fs_1.default.lstatSync(dir).isDirectory();
                    if (fileExists) {
                        err = new Error("Invalid path: ".concat(dir, " already exists and is not a directory"));
                        err.name = 'INVALID_PATH';
                        throw err;
                    }
                }
                content = {
                    __meta: opts,
                    __data: opts.encrypted ? '' : {}
                };
                fs_1.default.writeFileSync("".concat(blockPath, ".json"), JSON.stringify(content, null, 2));
                block = new block_1.Block({ absPath: blockPath, io: this });
                return [2 /*return*/, block];
            });
        });
    };
    FileIOClient.prototype.deleteBlock = function (blockPath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateBlockPath(blockPath)];
                    case 1:
                        _a.sent();
                        fs_1.default.unlinkSync("".concat(blockPath, ".json"));
                        return [2 /*return*/];
                }
            });
        });
    };
    FileIOClient.prototype.getBlock = function (blockPath) {
        var block = new block_1.Block({ absPath: blockPath, io: this });
        return block;
    };
    FileIOClient.prototype.getAllBlocks = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var blocks;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateCollectionPath(absPath)];
                    case 1:
                        _a.sent();
                        blocks = fs_1.default.readdirSync(absPath, { withFileTypes: true })
                            .filter(function (dirent) { return dirent.isFile() && dirent.name.endsWith('.json'); })
                            .map(function (dirent) { return new block_1.Block({
                            io: _this,
                            absPath: path_1.default.join(absPath, getFileNameWithoutExtension(dirent.name))
                        }); });
                        return [2 /*return*/, blocks];
                }
            });
        });
    };
    FileIOClient.prototype.createCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var collection;
            return __generator(this, function (_a) {
                fs_1.default.mkdirSync(absPath, { recursive: true });
                collection = new collection_1.Collection({ absPath: absPath, io: this });
                return [2 /*return*/, collection];
            });
        });
    };
    FileIOClient.prototype.getCollection = function (absPath) {
        var collection = new collection_1.Collection({ absPath: absPath, io: this });
        return collection;
    };
    FileIOClient.prototype.getAllCollections = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            var collections;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateCollectionPath(absPath)];
                    case 1:
                        _a.sent();
                        collections = fs_1.default.readdirSync(absPath, { withFileTypes: true })
                            .filter(function (dirent) { return dirent.isDirectory(); })
                            .map(function (dirent) { return new collection_1.Collection({
                            absPath: path_1.default.join(absPath, dirent.name),
                            io: _this
                        }); });
                        return [2 /*return*/, collections];
                }
            });
        });
    };
    FileIOClient.prototype.deleteCollection = function (absPath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateCollectionPath(absPath)];
                    case 1:
                        _a.sent();
                        fs_1.default.rmSync(absPath, { recursive: true, force: true });
                        return [2 /*return*/];
                }
            });
        });
    };
    return FileIOClient;
}());
exports.FileIOClient = FileIOClient;
