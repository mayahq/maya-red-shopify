const Field = require('../field')
const dedent = require('dedent-js')

class Select extends Field {
    constructor({
        options = [],
        displayName = null,
        defaultVal = null,
        isCredential = false,
        hidden = false,
        kind = "select"
    } = {}) {
        super(arguments[0])
        this.options = options
        this.defaultVal = defaultVal
        this.displayName = displayName
        this.kind = kind
    }

    resolveValue(RED, name, node, config, msg) {
        return config[name]
    }

    registerWithNode(name, node, config) {
        node[name] = config[name]
    }

    defaultsCode(name, schema) {
        if (this.isCredential) {
            return ''
        }

        return dedent(`
            ${name}: { value: "${this.defaultVal ? this.defaultVal : this.options[0]}" },
        `)
    }

    onEditPrepareCode(name, schema) {
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        return dedent(`
            const ${name}selectFieldValues = ${JSON.stringify(this.options)}
            ${name}selectFieldValues.forEach((val) => {
                $("#${prefix}-${name}").append($("<option></option>").attr("value", val).text(val))
            })
            $("#${prefix}-${name}").val(this.${name})
        `)
    }

    formCode(name, schema) {
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'

        return dedent(`
            <div class="form-row">
                <label for="${prefix}-${name}">${this.displayName ? this.displayName : name}</label>
                <select type="text" id="${prefix}-${name}">
                </select>
            </div>
        `)
    }
}

module.exports = Select