const Field = require('../field')
const dedent = require('dedent-js')

const typeMap = {
    str: 'String',
    num: 'Number',
    bool: 'Boolean'
}

class TypedField extends Field {

    constructor({
        type = "str",
        allowedTypes = null,
        displayName = null,
        defaultVal = '',
        trim = false,
        password = false,
        forConfig = false,
        required = false,
        kind = "typed"
    }) {
        super({})
        this.required = required;	
        this.type = type
        this.displayName = displayName
        this.defaultVal = defaultVal
        this.trim = trim,
        this.password = password
        this.allowedTypes = allowedTypes ? allowedTypes : [type]
        if (!this.allowedTypes.some((t) => t === this.type)) {
            this.allowedTypes.push(type)
        }
        this.kind = kind
    }

    resolveValue(RED, name, node, config, msg) {
        try {
            const value = node[name]
            const valueType = node[`payloadType${name}`]
            if (valueType === 'str') {
                return value
            }

            const val = RED.util.evaluateNodeProperty(value, valueType, node, msg)
            return val
        } catch (e) {
            throw new Error(`Error resolving value: ${e}`)
        }
    }

    registerWithNode(name, node, config) {
        node[name] = config[name]
        node[`payloadType${name}`] = config[`payloadType${name}`]
    }

    defaultsCode(name, schema) {
        if (this.isCredential) {
            return ''
        }
        return dedent(`
            ${name}: { value: "${this.defaultVal}",required: ${this.required} },
            payloadType${name}: { value: "${this.type}" },
        `)
    }

    credentialsCode(name, schema) {
        if (!this.isCredential) {
            return ''
        }

        return dedent(`
            ${name}: { type: ${typeMap[this.type]} },
            payloadType${name}: { value: "${this.type}" }, 
        `)
    }

    onEditPrepareCode(name, schema) {
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        return dedent(`
            if (this.payloadType${name} === null) {
                if (this.${name} === "") {
                    this.payloadType${name} = "date"
                } else {
                    this.payloadType${name} = "${this.type}"
                }
            } else if (this.payloadType${name} === 'string' || this.payloadType${name} === 'none') {
                this.payloadType${name} = "${this.type}"                
            }

            $("#${prefix}-payloadType${name}").val(this.payloadType${name})
            $("#${prefix}-${name}").typedInput({
                default: "${this.type}",
                typeField: $("#${prefix}-payloadType${name}"),
                types: ${JSON.stringify(this.allowedTypes)}
            })
            $("#${prefix}-${name}").typedInput("type", this.payloadType${name})
        `)
    }

    onEditSaveCode(name, schema) {
        if (!this.trim) {
            return ''
        }
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'

        return dedent(`
            $("${prefix}-${name}").val(
                $("${prefix}-${name}").val().trim()
            )
        `)
    }

    formCode(name, schema) {
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        return dedent(`
            <div class="form-row">
                <label for="${prefix}-${name}">${this.displayName ? this.displayName : name}</label>
                <input type="text" id="${prefix}-${name}"></input>
                <input type="hidden" id="${prefix}-payloadType${name}">                
            </div>
        `)
    }
}

module.exports = TypedField