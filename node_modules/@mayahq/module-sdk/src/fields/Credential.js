const Field = require('../field')
const dedent = require('dedent-js')

const credentialTypes = {
    str: 'String',
    num: 'Number',
    bool: 'Boolean'
}

class Credential extends Field {
    constructor({
        type = 'str',
        displayName = null,
        defaultVal = '',
        trim = false,
        password = false,
        forConfig = false,
        isCredential = false
    }) {
        super(arguments[0])
        this.type = type
        this.displayName = displayName
        this.defaultVal = defaultVal
        this.trim = trim
        this.password = password
        this.forConfig = forConfig
        this.isCredential = true
    }

    registerWithNode(name, node, config) {
        node[name] = config[name]
    }

    resolveValue(RED, name, node, config, msg) {
        return config[name]
    }

    credentialsCode(name, schema) {
        if (!this.isCredential) {
            return ''
        }
        
        return dedent(`
            ${name}: { type: ${credentialTypes[this.type]} },
        `)
    }

    onEditSaveCode(name, schema) {
        if (!this.trim) {
            return ''
        }

        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        return dedent(`
            $(${prefix}-${name}).val(
                $(${prefix}-${name}).val().trim()
            )
        `)
    }

    formCode(name, schema) {
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        return dedent(`
            <div class="form-row">
                <label for="${prefix}-${name}">${this.displayName ? this.displayName : name}</label>
                <input type="${this.password ? 'password': 'text'}" id="${prefix}-${name}"></input>                
            </div>
        `)
    }
}

module.exports = Credential