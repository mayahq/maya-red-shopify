const Field = require('../field')
const dedent = require('dedent-js')

class SelectField extends Field {
    constructor({
        fieldSets = {},
        displayName = null,
        defaultSet = null,
        forConfig = false,
        isCredential = false
    }) {
        super(arguments[0])

        this.fieldSets = fieldSets

        if (defaultSet) {
            this.defaultSet = defaultSet
        } else {
            const fieldSetNames = Object.keys(fieldSets)
            if (fieldSetNames.length > 0) {
                this.defaultSet = fieldSetNames[0]
            } else {
                this.defaultSet = ''
            }
        }

        this.childFields = {}
        Object.values(this.fieldSets).forEach((fieldSet) => {
            Object.entries(fieldSet).forEach(([fieldName, field]) => {
                field.forConfig = this.forConfig
                field.isConfigNodeField = this.isConfigNodeField
                field.isCredential = this.isCredential
                this.childFields[fieldName] = field
            })
        })
    } 

    resolveValue(RED, name, node, config, msg) {
        const selectedFieldSetName = config[name]
        const selectedFieldSet = this.fieldSets[selectedFieldSetName]

        const vals = {}
        try {
            Object.entries(selectedFieldSet).forEach(([fieldName, field]) => {
                const value = field.resolveValue(RED, fieldName, node, config, msg)
                vals[fieldName] = value
            })
        } catch (e) {
            throw new Error(`Error resolving ${value} of type ${valueType}: ${e}`)
        }
        
        return {
            selected: selectedFieldSetName,
            childValues: vals
        }
    }

    registerWithNode(name, node, config) {
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            field.registerWithNode(fieldName, node, config)
        })
        node[name] = config[name]
    }

    defaultsCode(name, schema) {
        if (this.isCredential) {
            return ''
        }

        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.defaultsCode(fieldName, schema)
            )
        })

        return dedent(`
            ${childFieldCode.join('\n')}
            ${name}: { value: "${this.defaultSet}" },
        `)
    }

    credentialsCode(name, schema) {
        if (!this.isCredential) {
            return ''
        }

        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.credentialsCode(fieldName, schema)
            )
        })

        return dedent(`
            ${childFieldCode.join('\n')}
            ${name}: { type: String },
        `)
    }


    onEditPrepareCode(name, schema) {
        const fieldSetNames = Object.keys(this.fieldSets)
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'

        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onEditPrepareCode(fieldName, schema)
            )
        })

        return dedent(`
            ${childFieldCode.join('\n\n')}


            const ${name}FieldSetNames = ${JSON.stringify(fieldSetNames)}
            ${name}FieldSetNames.forEach((fieldSetName) => {
                $("#${prefix}-${name}").append($("<option></option>").attr("value", fieldSetName).text(fieldSetName))
            })

            $("#${prefix}-${name}").val(this.${name})
            $("#${prefix}-${name}").on("change", (e) => {
                const newFieldSet = e.target.value
                ${name}FieldSetNames.forEach((fieldSetName) => {
                    if (fieldSetName !== newFieldSet) {
                        document.querySelector("div#fieldset-" + fieldSetName).style.display = 'none'
                    }
                })
                document.querySelector("div#fieldset-" + newFieldSet).style.display = ''
                $("#node-input-${name}").val(e.target.value)
            })
        `)
    }


    formCode(name, schema) {
        const fieldSetCodes = []
        const prefix = schema.isConfig ? 'node-config-input' : 'node-input'
        Object.entries(this.fieldSets).forEach(([fieldSetName, fieldSet]) => {
            const childFieldCodes = []
            Object.entries(fieldSet).forEach(([fieldName, field]) => {
                childFieldCodes.push(field.formCode(fieldName, schema))
            })
            fieldSetCodes.push(dedent(`
                <div id="fieldset-${fieldSetName}" style="padding-left: 10px;">
                    ${childFieldCodes.join('\n')}
                </div>
            `))
        })

        return dedent(`
            <div class="form-row">
                <label for="${prefix}-${name}">${this.displayName ? this.displayName : name}</label>
                <select type="text" id="${prefix}-${name}">
                </select>
            </div>
            ${fieldSetCodes.join('\n\n')}
        `)
    }

    onEditSaveCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onEditSaveCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }

    onEditCancelCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onEditCancelCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }

    onEditDeleteCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onEditDeleteCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }

    onEditResizeCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onEditResizeCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }

    onPaletteAddCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onPaletteAddCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }

    onPaletteRemoveCode(name, schema) {
        const childFieldCode = []
        Object.entries(this.childFields).forEach(([fieldName, field]) => {
            childFieldCode.push(
                field.onPaletteRemoveCode(fieldName, schema)
            )
        })

        return dedent(`${childFieldCode.join('\n')}`)
    }
    
}

module.exports = SelectField