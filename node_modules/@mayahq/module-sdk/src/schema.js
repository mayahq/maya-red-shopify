const Ejs = require('ejs')
const path = require('path')
const beautify = require('js-beautify').html
const fs = require('fs')

function getDefault(type) {
    if (type === String) return ''
    else if (type === Number) return 0
}

class Schema {
    constructor({
        name,
        label,
        category,
        fields = {},
        redOpts = null,
        io = { inputs: 1, outputs: 1 },
        icon = "fa-file-code-o.png" ,
        color = '#8BBDD9',
        isConfig = false,
        isProfileConfigNode = false,
        exportable = true
    }) {
        this.fields = fields
        this.name = name
        this.category = category
        this.redOpts = redOpts
        this.io = io
        this.icon = icon
        this.color = color
        this.isConfig = isConfig
        this.exportable = exportable
        this.label = label ? label : name
        this.isProfileConfigNode = isProfileConfigNode
        if (this.isProfileConfigNode) {
            this.isConfig = true
        }
        if (this.isConfig) {
            Object.entries(this.fields).forEach(([fieldName, field]) => {
                field.forConfig = true
            })
        }
    }

    generateTemplateData(docsPath = null) {
        const codeData = {
            defaultsCode: [],
            credentialsCode: [],
            onEditPrepareCode: [],
            onEditSaveCode: [],
            onEditCancelCode: [],
            onEditDeleteCode: [],
            onEditResizeCode: [],
            onPaletteAddCode: [],
            onPaletteRemoveCode: [],
            formCode: []
        }

        const pushCodeToArrays = (field, name) => {
            Object.keys(codeData).forEach((key) => {
                const code = field[key](name, this)
                if (code !== '') {
                    // Don't generate formCode if field is hidden
                    if (key === 'formCode' && field.hidden) {
                        return
                    }
                    codeData[key].push(code)
                }
            })
        }

        Object.entries(this.fields).forEach(([name, field]) => {
            pushCodeToArrays(field, name)
        })

        if (this.redOpts && this.redOpts.credentials) {
            Object.entries(this.redOpts.credentials).forEach(([name, field]) => {
                field.isCredential = true
                pushCodeToArrays(field, name)
            })
        }

        const templateData = {
            name: this.name,
            label: this.label,
            category: this.category,
            icon: this.icon,
            numInputs: this.io.inputs,
            numOutputs: this.io.outputs,
            color: this.color,
            isConfig: this.isConfig,
            exportable: this.exportable,
            hasCredentials: this.redOpts && this.redOpts.credentials,
            isProfileConfigNode: this.isProfileConfigNode
        }

        if (docsPath) {
            const docs = fs.readFileSync(docsPath)
            templateData.documentation = docs
        } else {
            templateData.documentation = ''
        }


        return Object.assign(templateData, codeData)
    }

    generateHTML(docsPath = null) {
        return new Promise((resolve, reject) => {
            const data = this.generateTemplateData(docsPath)
            const templatePath = path.join(__dirname, './codegen/node.ejs')
            Ejs.renderFile(templatePath, data, {}, (err, data) => {
                if (err) {
                    reject(err)
                } else {
                    const prettyHtml = beautify(data, {
                        indent_size: 4, space_in_empty_paren: true
                    })
                    resolve(prettyHtml)
                }
            })
        })
    }
}

module.exports = Schema

// defaultCodes.push(field.defaultCode(name))
// credentialCodes.push(field.credentialCode(name))
// onEditPrepareCodes.push(field.onEditPrepareCode(name))
// onEditSaveCodes.push(field.onEditSaveCode(name))
// onEditCancelCodes.push(field.onEditCancelCode(name))
// onEditDeleteCodes.push(field.onEditDeleteCode(name))
// onEditResizeCodes.push(field.onEditResizeCode(name))
// onPaletteAddCodes.push(field.onPaletteAddCode(name))
// onPaletteRemoveCodes.push(field.onPaletteRemoveCode(name))