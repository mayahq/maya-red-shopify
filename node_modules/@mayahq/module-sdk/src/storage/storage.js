const fs = require('fs')
const path = require('path')
const lockFile = require('lockfile')

const { execGetQuery } = require('./query')

class Storage {
    constructor({ root, type }) {
        this.root = root
        this.type = type
    }

    static _get(dbpath, query) {
        if (!fs.existsSync(dbpath)) {
            fs.mkdirSync(path.dirname(dbpath), { recursive: true })
            fs.writeFileSync(dbpath, JSON.stringify({}))
        }
        
        const targetJson = require(dbpath)
        const results = execGetQuery(targetJson, query)
        return results
    }

    static _executeSyncOperationOnPath(path, op) {
        return new Promise((resolve, reject) => {
            const opts = {
                wait: 60000,
                stale: 20000,
            }
            lockFile.lock(path, {wait: 60000, stale: 20000}, (err) => {
                if (err) {
                    return reject(err)
                }

                try {
                    const result = op()
                    // setTimeout(() => lockFile.unlock(path), 10000)
                    lockFile.unlock(path)
                    return resolve(result)
                } catch (e) {
                    lockFile.unlock(path)
                    return reject(e)
                }
            })
        })
    }

    get(query) {
        throw new Error('Storage method get not implemented')
    }

    set(query) {
        throw new Error('Storage method set not implemented')
    }

    update(updates) {
        throw new Error('Storage method update not implemented')
    }
}

module.exports = Storage