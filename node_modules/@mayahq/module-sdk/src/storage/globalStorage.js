const path = require('path')
const fs = require('fs')
const update = require('immutability-helper')

const Storage = require('./storage')
const { execSetQuery, execGetQuery } = require('./query')

class GlobalStorage extends Storage {
    constructor({ root }) {
        super({ root, type: 'GLOBAL' })

        this.dbpath = path.join(root, 'persistentStore', 'global.json')
        this.lockpath = path.join(root, 'persistentStore', 'global.lock')

        const globalData = Storage._get(this.dbpath, {})
        this.data = globalData
    }

    get(query) {
        return Storage._executeSyncOperationOnPath(this.lockpath, () => {
            const data = require(this.dbpath)
            const result = execGetQuery(data, query)
            return result
        })
    }

    set(query) {
        return Storage._executeSyncOperationOnPath(this.lockpath, () => {
            const data = require(this.dbpath)
            const result = execSetQuery(data, query)
            fs.writeFileSync(this.dbpath, JSON.stringify(result))
            return result
        })
    }

    update(updates) {
        return Storage._executeSyncOperationOnPath(this.lockpath, () => {
            const data = require(this.dbpath)
            const result = update(data, updates)
            fs.writeFileSync(this.dbpath, JSON.stringify(result))
            return result
        })
    }
}

module.exports = GlobalStorage