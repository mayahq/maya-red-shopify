const path = require('path')
const fs = require('fs')
const update = require('immutability-helper')
const AsyncLock = require('async-lock')

const Storage = require('./storage')
const { execSetQuery, execGetQuery } = require('./query')


class NodeStorage extends Storage {
    constructor({ root, nodeId, runtimeId }) {
        super({ root, type: 'NODE' })
        this.nodeId = nodeId
        this.runtimeId = runtimeId

        this.lock = new AsyncLock()

        this.dbpath = path.join(root, 'persistentStore', runtimeId, 'node', `${nodeId}.json`)
        const nodeData = Storage._get(this.dbpath, {})
        this.data = nodeData
    }

    get(query) {
        return new Promise((resolve, reject) => {
            this.lock.acquire(this.nodeId, (done) => {
                try {
                    const result = execGetQuery(this.data, query)
                    done(null, result)
                } catch(e) {
                    done(e, null)
                }
            }, (err, res) => {
                if (err) {
                    return reject(err)
                }
                resolve(res)
            })
        })
    }

    set(query) {
        return new Promise((resolve, reject) => {
            this.lock.acquire(this.nodeId, (done) => {
                try {
                    const result = execSetQuery(this.data, query)
                    this.data = result
                    fs.writeFileSync(this.dbpath, JSON.stringify(result))
                    done(null, result)
                } catch (e) {
                    done(e, null)
                }
            }, (err, res) => {
                if (err) {
                    return reject(err)
                }
                resolve(res)
            })
        })
    }

    update(updates) {
        return new Promise((resolve, reject) => {
            this.lock.acquire(this.nodeId, (done) => {
                try {
                    const result = update(this.data, updates)
                    this.data = result
                    fs.writeFileSync(this.dbpath, JSON.stringify(result))
                    done(null, result)
                } catch (e) {
                    done(e, null)
                }
            }, (err, res) => {
                if (err) {
                    return reject(err)
                }
                resolve(res)
            })
        })
    }
}

module.exports = NodeStorage